document.addEventListener('DOMContentLoaded', () => {
    let lives = 6; // Poƒçet ≈æivot≈Ø

    // Funkce pro kontrolu odpovƒõdi
    const checkAnswer = (input, correctAnswer) => {
        const userAnswer = input.value.trim().toLowerCase();
        if (userAnswer === correctAnswer) {
            showPowEffect();
            removeLife();
            input.disabled = true; // Zablokuje pole po spr√°vn√© odpovƒõdi
            input.nextElementSibling.disabled = true; // Zablokuje tlaƒç√≠tko
        } else {
            showErrorEffect();
        }
    };

    // Odebere jeden ≈æivot a aktualizuje zobrazen√≠
    const removeLife = () => {
        if (lives > 0) {
            lives--;
            const livesElement = document.getElementById('lives');
            livesElement.textContent = '‚ù§Ô∏è '.repeat(lives) + 'üñ§ '.repeat(6 - lives);

            // Zkontroluje, zda hr√°ƒç vyhr√°l
            if (lives === 0) {
                showVictoryScreen();
            }
        }
    };

    const showPowEffect = () => {
        const powImage = document.getElementById('pow-image');
        powImage.classList.remove('hidden');
        powImage.style.opacity = 1;
    
        // Skryje obr√°zek po 1 sekundƒõ
        setTimeout(() => {
            powImage.style.opacity = 0;
            setTimeout(() => {
                powImage.classList.add('hidden');
            }, 500); // ƒåasov√Ω zpo≈ædƒõn√≠ pro skryt√≠ po animaci
        }, 1000);
    };
    

    // Zobrazen√≠ efektu p≈ôi chybƒõ
    const showErrorEffect = () => {
        const errorOverlay = document.createElement('div');
        errorOverlay.id = 'error-overlay';
        document.body.appendChild(errorOverlay);
        errorOverlay.classList.add('active');

        setTimeout(() => {
            errorOverlay.classList.remove('active');
            errorOverlay.remove();
        }, 1000);
    };

    // Zobrazen√≠ v√Ωhern√≠ obrazovky
    const showVictoryScreen = () => {
        const victory = document.getElementById('victory');
        victory.classList.remove('hidden');
        victory.style.opacity = 1; // Zviditeln√≠ v√Ωhern√≠ obrazovku
        victory.style.pointerEvents = 'all';
    };

    // P≈ôid√°n√≠ event listener≈Ø na tlaƒç√≠tka "Zkontrolovat"
    const buttons = document.querySelectorAll('.check-answer');
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            const input = button.previousElementSibling; // Najde odpov√≠daj√≠c√≠ textov√© pole
            const correctAnswer = button.getAttribute('data-correct');
            checkAnswer(input, correctAnswer);
        });
    });

    // Inicializace ≈æivot≈Ø na zaƒç√°tku
    const livesElement = document.getElementById('lives');
    livesElement.textContent = '‚ù§Ô∏è '.repeat(lives);
});

document.addEventListener('DOMContentLoaded', () => {
    const bgImage = document.getElementById('background-image');
    let x = Math.random() * window.innerWidth; // V√Ωchoz√≠ pozice X
    let y = Math.random() * window.innerHeight; // V√Ωchoz√≠ pozice Y
    let dx = (Math.random() - 0.5) * 2; // Smƒõr pohybu X
    let dy = (Math.random() - 0.5) * 2; // Smƒõr pohybu Y
    const speed = 2; // Rychlost pohybu

    function moveBackground() {
        x += dx * speed;
        y += dy * speed;

        // Odr√°≈æen√≠ od hranic okna
        if (x <= 0 || x >= window.innerWidth - bgImage.offsetWidth) dx *= -1;
        if (y <= 0 || y >= window.innerHeight - bgImage.offsetHeight) dy *= -1;

        bgImage.style.transform = `translate(${x}px, ${y}px)`;

        requestAnimationFrame(moveBackground);
    }

    moveBackground();
});
document.addEventListener('DOMContentLoaded', () => {
    const giveUpButton = document.getElementById('give-up');
    const giveUpScreen = document.getElementById('give-up-screen');
    const retryButton = document.getElementById('retry');

    // Zobrazen√≠ spr√°vn√Ωch odpovƒõd√≠
    giveUpButton.addEventListener('click', () => {
        giveUpScreen.classList.remove('hidden');
        giveUpScreen.style.opacity = 1;
        giveUpScreen.style.pointerEvents = 'all';
    });

    // Restart str√°nky
    retryButton.addEventListener('click', () => {
        location.reload(); // Obnov√≠ str√°nku
    });
});

// Zobrazen√≠ v√Ωhern√≠ obrazovky

const showVictoryScreen = () => {
    const victory = document.getElementById('victory');
    victory.classList.remove('hidden'); // Zviditeln√≠ v√Ωhern√≠ obrazovku
    victory.style.opacity = 1;
    victory.style.pointerEvents = 'all';

    const fightAgainButton = document.getElementById('fight-again');
    if (fightAgainButton) {
        fightAgainButton.addEventListener('click', () => {
            location.reload(); // Obnov√≠ str√°nku
        });
    }
};


document.addEventListener('DOMContentLoaded', () => {
    const emojiContainer = document.getElementById('question-emojis');
    const emojis = [];
    const numEmojis = 242; // Poƒçet emotikon≈Ø
    const speed = 2; // Rychlost pohybu

    // Vytvo≈ô√≠ 42 emotikon≈Ø a p≈ôid√° je do kontejneru
    for (let i = 0; i < numEmojis; i++) {
        const emoji = document.createElement('div');
        emoji.classList.add('question-emoji');
        emoji.textContent = '‚ùì';
        emoji.style.top = `${Math.random() * window.innerHeight}px`;
        emoji.style.left = `${Math.random() * window.innerWidth}px`;
        emojiContainer.appendChild(emoji);

        // Ka≈æd√Ω emotikon m√° n√°hodnou rychlost a smƒõr
        emojis.push({
            element: emoji,
            dx: (Math.random() - 0.5) * speed,
            dy: (Math.random() - 0.5) * speed,
            x: parseFloat(emoji.style.left),
            y: parseFloat(emoji.style.top),
        });
    }

    // Funkce pro pohyb emotikon≈Ø
    function moveEmojis() {
        emojis.forEach(emoji => {
            emoji.x += emoji.dx;
            emoji.y += emoji.dy;

            // Odr√°≈æen√≠ od hranic obrazovky
            if (emoji.x < 0 || emoji.x > window.innerWidth - 20) emoji.dx *= -1;
            if (emoji.y < 0 || emoji.y > window.innerHeight - 20) emoji.dy *= -1;

            // Aktualizace pozice
            emoji.element.style.transform = `translate(${emoji.x}px, ${emoji.y}px)`;
        });

        requestAnimationFrame(moveEmojis); // Plynul√° animace
    }

    moveEmojis();
});

document.addEventListener('DOMContentLoaded', () => {
    const introImage = document.getElementById('intro-image');

    // Zobraz√≠ obr√°zek p≈ôi naƒçten√≠ str√°nky
    introImage.classList.add('active');

    // Skryje obr√°zek po 3 sekund√°ch
    setTimeout(() => {
        introImage.classList.remove('active');
    }, 3000);
});

document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.check-answer');

    // Funkce pro zobrazen√≠ emotikon≈Ø pƒõsti
    const showPunchEmojis = (x, y) => {
        const emojiContainer = document.createElement('div');
        emojiContainer.classList.add('punch-emoji');
        emojiContainer.textContent = 'üëä';

        // Nastaven√≠ poƒç√°teƒçn√≠ pozice emotikonu
        emojiContainer.style.left = `${x}px`;
        emojiContainer.style.top = `${y}px`;

        document.body.appendChild(emojiContainer);

        // Odstranƒõn√≠ emotikonu po 2 sekund√°ch
        setTimeout(() => {
            emojiContainer.remove();
        }, 2000);
    };

    // P≈ôid√°n√≠ obsluhy kliknut√≠ na tlaƒç√≠tka ‚ÄûZkontrolovat‚Äú
    buttons.forEach(button => {
        button.addEventListener('click', (event) => {
            const rect = button.getBoundingClientRect();

            // Zobraz√≠ emotikony pƒõsti pobl√≠≈æ tlaƒç√≠tka
            for (let i = 0; i < 20; i++) {
                const randomX = rect.left + Math.random() * rect.width;
                const randomY = rect.top + Math.random() * rect.height;
                showPunchEmojis(randomX, randomY);
            }
        });
    });
});
